<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta nhrse="viewport" content="width=device-width, initial-scale=1.0">
	<title>JavaScript</title>
</head>
<body>
	<script>	

class Pelicula {
  constructor({id,titulo,director,estreno,pais,generos,calificacion}) {
    this.id = id;
    this.titulo = titulo;
    this.director = director;
    this.estreno = estreno;
    this.pais = pais;
    this.generos = generos;
    this.calificacion = calificacion;

    this.validarIMDB(id);
    this.validarTitulo(titulo);
    this.validarDirector(director);
    this.validarA√±oDeEstreno(estreno);
    this.validarPais(pais);
    this.validarGeneros(generos);
    this.validarCalificacion(calificacion);
  }

  static get listasGeneros() { // Atributo est√°tico 
    return ["Action", "Adult", "Adventure", "Animation", "Biography", "Comedy", 
    "Crime", "Documentary" ,"Drama", "Family", "Fantasy", "Film Noir", "Game"-"Show", 
    "History", "Horror", "Musical", "Music", "Mystery", "News", "Reality-TV", "Romance", 
    "Sci-Fi", "Short", "Sport", "Talk-Show", "Thriller", "War", "Western"]
  }

  static generosAceptados() { // M√©todo est√°tico
    return console.info(`Los g√©neros aceptados son: ${Pelicula.listasGeneros.join(", ")} `) 
    // Join() une elementos, los () son el separador, al ser un m√©todo est√°tico no necesita 
    instanciar, directamente llama a la clase
  } 


  validarCadena(propiedad,valor) {
    if (!valor) return console.warn(`${propiedad} "${valor}" est√° vac√≠o`);

    if (typeof valor !== "string") return console.error(`${propiedad} "${valor}" ingresado, No es una cadena de texto`);
    // Si todo lo anterior no se cumple entonces:
    return true;
  }

  validarLongitudCadena(propiedad,valor,longitud) {
    if (valor.length > longitud) return console.error(`${propiedad} "${valor}" excede el n√∫mero de caracteres permitidos ${longitud}`);
    // Si todo lo anterior no se cumple entonces:
    return true;
  }

  validarNumeros(propiedad,valor) {
    if (!valor) return console.warn(`${propiedad} "${valor}" est√° vac√≠o`);
       // ! <= Es negaci√≥n
    if (typeof valor !== "number") return console.error(`${propiedad} "${valor}" ingresado, No es un n√∫mero`);
    // Si todo lo anterior no se cumple entonces:
    return true;
  }

  validarArreglo(propiedad,valor) {
    if (!valor) return console.warn(`${propiedad} "${valor}" est√° vac√≠o`);
       // ! <= Es negaci√≥n  
    if (!(valor instanceof Array)) return console.error(`${propiedad} "${valor}" ingresado, No es un arreglo`);

    if (valor.length === 0) return console.error(`${propiedad} "${valor}" no tiene datos`);

    for (let cadena of valor){ 
    // Lo anterior es un for of (let i of ejemplo), permite recorrer cualquier elemento que sea iterable (que se pueda recorrer)
      if (typeof cadena !== "string") return console.error(`El valor "${cadena}" ingresado, No es una cadena de texto`)
    }
    // Si todo lo anterior no se cumple entonces:
    return true;
  }

  validarIMDB(id) {
    if (this.validarCadena("IMDB id",id)) // (propiedad,valor)
      if (!(/^([a-z]){2}([0-9]){7}$/.test(id))) // Expresi√≥n regular
      /* Si todo lo anterior no se cumple entonces: 
      ^ => No debe de haber nada antes de la expresi√≥n
      $ => No debe haber nada desp√∫es de la expresi√≥n
      */
     // Si todo lo anterior no se cumple entonces:
        return console.error(`IMDB id "${id}" no es v√°lido, debe tener 9 caracteres, las 2 primeras letras min√∫sculas, los 7 restantes n√∫meros`);
    }

    validarTitulo(titulo) {
      if (this.validarCadena("T√≠tulo",titulo)) // (propiedad,valor)
      this.validarLongitudCadena("T√≠tulo",titulo,100) // (propiedad, valor, longitud)
    }

    validarDirector(director) {
      if (this.validarCadena("Director",director)) // (propiedad,valor)
      this.validarLongitudCadena("Director",director,50) // (propiedad, valor, longitud)
    }

    validarA√±oDeEstreno(estreno) {
      if (this.validarNumeros("A√±o de Estreno",estreno)) // (propiedad,valor)
      if (Math.round(!(/^([0-9]){4}$/.test(estreno)))) // Expresi√≥n regular
      return console.error(`A√±o de Estreno "${estreno}" no es v√°lido, debe tener 4 caracteres y deben ser s√≥lo n√∫meros, ejemplo 1234`)
    }

    validarPais(pais) {
      if (this.validarArreglo("Pa√≠s",pais)); // (propiedad,valor)
    }

    validarGeneros(generos) { // RECORDAR que "generos" es el valor ingresado por usuario
      if (this.validarArreglo("G√©neros",generos)) { // (propiedad,valor)
        for (let genero of generos) { 
        // Lo anterior es un for of (let i of ejemplo), permite recorrer cualquier elemento que sea iterable (que se pueda recorrer)          
          if(!Pelicula.listasGeneros.includes(genero)) { 
            // Includes v√°lida si el g√©nero en cuesti√≥n se encuentra dentro de la lista, dependiendo de si se encuentra o no, retorna true o false 
            console.error(`Genero(s) incorrectos: "${generos.join(",")}"`);
             // retorna los generos aceptados para hacerle saber al usuario cuales son
          }
        } 
      }
    }

    validarCalificacion(calificacion) {
      if (this.validarNumeros("Calificaci√≥n",calificacion)) // (propiedad,valor)
       return (calificacion < 0 || calificacion > 10) // ? : <= Operador Ternario
        ? console.error(`La calificaci√≥n debe estar entre 0 y 10`) 
        : this.calificacion = calificacion.toFixed(1); 
   } // toFixed me permite indicar a cuantos numeros decimales voy a cortar la extensi√≥n del n√∫mero

   fichaTecnica() { //Concatenaci√≥n de caracteres, \n es para salto de linea
    console.info(`FICHA TECNICA:\nüîπTitulo: ${this.titulo}\nüîπDirector: ${this.director}\n
    üîπA√±o: ${this.estreno}\nüîπPa√≠s: ${this.pais.join("-")}\nüîπG√©neros: ${this.generos.join("-")}\n
    üîπCalificaci√≥n: ${this.calificacion}\nüîπIMDB id: ${this.id}`) 
    // Este m√©todo no lo ejecutamos en el constructor porque no necesitamos validar nada
   }
  }


// ARREGLO CON INFO DE 3 PELICULAS

const pelis = [
  {
  id: "tt0404032",
  titulo: "Exorcismo de Emliy rose",
  director: "Lakeshore Entertainment",
  estreno: 2005,
  pais: ["United States"],
  generos: ["Horror"],
  calificacion: 8.5
  },
  {
  id: "tt0944947",
  titulo: "Game Of Thrones",
  director: "David Benioff-D. B. Weiss",
  estreno: 2011,
  pais: ["United States"],
  generos: ["Action","Adventure","Fantasy","Drama"],
  calificacion: 9.99999
  }, 
  {
  id: "tt4158110",
  titulo: "Mr.robot",
  director: "Sam Esmail",
  estreno: 2015,
  pais: ["United States"],
  generos: ["Drama","Thriller"],
  calificacion: 7.5
  }
];

// IMPRESION EN CONSOLA DE LAS PELICULAS

pelis.forEach(pelis => new Pelicula(pelis).fichaTecnica())

	</script>
</body>
</html>
